Прочитать главу Ruby Exceptions
Прочитать главу о регулярных выражениях

Реализовать проверку (валидацию) данных для всех классов. Проверять основные атрибуты (название, номер, тип и т.п.) на наличие, длину и т.п. (в зависимости от атрибута):
Валидация должна взываться при создании объекта, если объект невалидный, то должно выбрасываться исключение
Должен быть метод valid? который возвращает true, если объект валидный и false - в противном случае.
Релизовать проверку на формат номера поезда. Допустимый формат: три буквы или цифры в любом порядке, необязательный дефис (может быть, а может нет) и еще 2 буквы или цифры после дефиса.
Релизовать интерфейс, который бы выводил пользователю ошибки валидации без прекращения работы программы.
Убрать из классов все puts (кроме методов, которые и должны что-то выводить на экран), методы просто возвращают значения. (Начинаем бороться за чистоту кода).

UPDATE к заданию:
- Дополнительно сделать следующее: при добавлениит вагонов к поезду и несовпадении типов также выбрасывать исключение.
- Для класса маршрута сделать валидацию на то, что при добавлении станций объекты имеют тип (класс) RailwayStation (или как он у вас называется).
- Добавить валидацию (с выбросом исключения) на глобальную уникальность номера поезда. То есть, нельзя создать 2 объекта класса Train с одинаковым номером.
